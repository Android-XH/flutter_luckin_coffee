// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_luckin_coffee/jsonserialize/user/user_info_entity.dart';
import 'package:flutter_luckin_coffee/generated/json/user_info_entity_helper.dart';
import 'package:flutter_luckin_coffee/jsonserialize/user/base_date_entity.dart';
import 'package:flutter_luckin_coffee/generated/json/base_date_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case UserInfoEntity:
			return userInfoEntityFromJson(data as UserInfoEntity, json) as T;			case UserInfoUserInfo:
			return userInfoUserInfoFromJson(data as UserInfoUserInfo, json) as T;			case UserInfoUserInfoUserLog:
			return userInfoUserInfoUserLogFromJson(data as UserInfoUserInfoUserLog, json) as T;			case BaseDateEntity:
			return baseDateEntityFromJson(data as BaseDateEntity, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case UserInfoEntity:
			return userInfoEntityToJson(data as UserInfoEntity);			case UserInfoUserInfo:
			return userInfoUserInfoToJson(data as UserInfoUserInfo);			case UserInfoUserInfoUserLog:
			return userInfoUserInfoUserLogToJson(data as UserInfoUserInfoUserLog);			case BaseDateEntity:
			return baseDateEntityToJson(data as BaseDateEntity);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'UserInfoEntity':
			return UserInfoEntity().fromJson(json);			case 'UserInfoUserInfo':
			return UserInfoUserInfo().fromJson(json);			case 'UserInfoUserInfoUserLog':
			return UserInfoUserInfoUserLog().fromJson(json);			case 'BaseDateEntity':
			return BaseDateEntity().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'UserInfoEntity':
			return List<UserInfoEntity>();			case 'UserInfoUserInfo':
			return List<UserInfoUserInfo>();			case 'UserInfoUserInfoUserLog':
			return List<UserInfoUserInfoUserLog>();			case 'BaseDateEntity':
			return List<BaseDateEntity>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}